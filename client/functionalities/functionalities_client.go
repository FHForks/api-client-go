// Code generated by go-swagger; DO NOT EDIT.

package functionalities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new functionalities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for functionalities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetV1Functionalities lists all functionalities

List all of the functionalities that have been added to the organiation
*/
func (a *Client) GetV1Functionalities(params *GetV1FunctionalitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1FunctionalitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FunctionalitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1Functionalities",
		Method:             "GET",
		PathPattern:        "/v1/functionalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1FunctionalitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1FunctionalitiesOK), nil

}

/*
GetV1FunctionalitiesFunctionalityID retrieves a single functionality

Retrieves a single functionality by ID
*/
func (a *Client) GetV1FunctionalitiesFunctionalityID(params *GetV1FunctionalitiesFunctionalityIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1FunctionalitiesFunctionalityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FunctionalitiesFunctionalityIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1FunctionalitiesFunctionalityId",
		Method:             "GET",
		PathPattern:        "/v1/functionalities/{functionality_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1FunctionalitiesFunctionalityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1FunctionalitiesFunctionalityIDOK), nil

}

/*
PatchV1FunctionalitiesFunctionalityID updates a functionality

Update a functionality's attributes

*/
func (a *Client) PatchV1FunctionalitiesFunctionalityID(params *PatchV1FunctionalitiesFunctionalityIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1FunctionalitiesFunctionalityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1FunctionalitiesFunctionalityIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1FunctionalitiesFunctionalityId",
		Method:             "PATCH",
		PathPattern:        "/v1/functionalities/{functionality_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1FunctionalitiesFunctionalityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1FunctionalitiesFunctionalityIDOK), nil

}

/*
PostV1Functionalities creates a functionality

Creates a functionality for the organization
*/
func (a *Client) PostV1Functionalities(params *PostV1FunctionalitiesParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1FunctionalitiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FunctionalitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1Functionalities",
		Method:             "POST",
		PathPattern:        "/v1/functionalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1FunctionalitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1FunctionalitiesCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
