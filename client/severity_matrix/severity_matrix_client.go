// Code generated by go-swagger; DO NOT EDIT.

package severity_matrix

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new severity matrix API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for severity matrix API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetV1SeverityMatrix translations missing en api severity matrix retrieve summary

translation missing: en.api.severity_matrix.retrieve.description
*/
func (a *Client) GetV1SeverityMatrix(params *GetV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1SeverityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1SeverityMatrix",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1SeverityMatrixOK), nil

}

/*
PatchV1SeverityMatrix translations missing en api severity matrix update summary

translation missing: en.api.severity_matrix.update.description
*/
func (a *Client) PatchV1SeverityMatrix(params *PatchV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1SeverityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeverityMatrixParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1SeverityMatrix",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1SeverityMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1SeverityMatrixOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
