// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetV1IntegrationsAwsCloudtrailBatches translations missing en api integrations aws cloudtrail batches list summary

translation missing: en.api.integrations.aws.cloudtrail_batches.list.description
*/
func (a *Client) GetV1IntegrationsAwsCloudtrailBatches(params *GetV1IntegrationsAwsCloudtrailBatchesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1IntegrationsAwsCloudtrailBatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsCloudtrailBatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsCloudtrailBatches",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsCloudtrailBatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1IntegrationsAwsCloudtrailBatchesOK), nil

}

/*
GetV1IntegrationsAwsCloudtrailBatchesID translations missing en api integrations aws cloudtrail batches retrieve summary

translation missing: en.api.integrations.aws.cloudtrail_batches.retrieve.description
*/
func (a *Client) GetV1IntegrationsAwsCloudtrailBatchesID(params *GetV1IntegrationsAwsCloudtrailBatchesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1IntegrationsAwsCloudtrailBatchesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsCloudtrailBatchesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsCloudtrailBatchesId",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsCloudtrailBatchesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1IntegrationsAwsCloudtrailBatchesIDOK), nil

}

/*
GetV1IntegrationsAwsCloudtrailBatchesIDEvents get v1 integrations aws cloudtrail batches Id events API
*/
func (a *Client) GetV1IntegrationsAwsCloudtrailBatchesIDEvents(params *GetV1IntegrationsAwsCloudtrailBatchesIDEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1IntegrationsAwsCloudtrailBatchesIDEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsCloudtrailBatchesIDEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsCloudtrailBatchesIdEvents",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsCloudtrailBatchesIDEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1IntegrationsAwsCloudtrailBatchesIDEventsOK), nil

}

/*
GetV1IntegrationsAwsConnections translations missing en api integrations aws connections list summary

translation missing: en.api.integrations.aws.connections.list.description
*/
func (a *Client) GetV1IntegrationsAwsConnections(params *GetV1IntegrationsAwsConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1IntegrationsAwsConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsConnections",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1IntegrationsAwsConnectionsOK), nil

}

/*
GetV1IntegrationsAwsConnectionsID translations missing en api integrations aws connections retrieve summary

translation missing: en.api.integrations.aws.connections.retrieve.description
*/
func (a *Client) GetV1IntegrationsAwsConnectionsID(params *GetV1IntegrationsAwsConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1IntegrationsAwsConnectionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsConnectionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsConnectionsId",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/connections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsConnectionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1IntegrationsAwsConnectionsIDOK), nil

}

/*
PatchV1IntegrationsAwsCloudtrailBatchesID translations missing en api integrations aws cloudtrail batches update summary

translation missing: en.api.integrations.aws.cloudtrail_batches.update.description
*/
func (a *Client) PatchV1IntegrationsAwsCloudtrailBatchesID(params *PatchV1IntegrationsAwsCloudtrailBatchesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1IntegrationsAwsCloudtrailBatchesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IntegrationsAwsCloudtrailBatchesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1IntegrationsAwsCloudtrailBatchesId",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1IntegrationsAwsCloudtrailBatchesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1IntegrationsAwsCloudtrailBatchesIDOK), nil

}

/*
PatchV1IntegrationsAwsConnectionsID translations missing en api integrations aws connections update summary

translation missing: en.api.integrations.aws.connections.update.description
*/
func (a *Client) PatchV1IntegrationsAwsConnectionsID(params *PatchV1IntegrationsAwsConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1IntegrationsAwsConnectionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IntegrationsAwsConnectionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1IntegrationsAwsConnectionsId",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/aws/connections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1IntegrationsAwsConnectionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1IntegrationsAwsConnectionsIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
