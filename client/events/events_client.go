// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1Events(params *GetV1EventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1EventsOK, error)

	GetV1EventsEventID(params *GetV1EventsEventIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1EventsEventIDOK, error)

	GetV1EventsEventIDVotesStatus(params *GetV1EventsEventIDVotesStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1EventsEventIDVotesStatusOK, error)

	PatchV1EventsEventID(params *PatchV1EventsEventIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1EventsEventIDOK, error)

	PatchV1EventsEventIDVotes(params *PatchV1EventsEventIDVotesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1EventsEventIDVotesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetV1Events Retrieve the timeline for an incident
*/
func (a *Client) GetV1Events(params *GetV1EventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1EventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1EventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Events",
		Method:             "GET",
		PathPattern:        "/v1/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1EventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1EventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1EventsEventID Get an individual incident event
*/
func (a *Client) GetV1EventsEventID(params *GetV1EventsEventIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1EventsEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1EventsEventIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1EventsEventId",
		Method:             "GET",
		PathPattern:        "/v1/events/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1EventsEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1EventsEventIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1EventsEventId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1EventsEventIDVotesStatus returns the status of the votes

  Returns the status of the votes
*/
func (a *Client) GetV1EventsEventIDVotesStatus(params *GetV1EventsEventIDVotesStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1EventsEventIDVotesStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1EventsEventIDVotesStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1EventsEventIdVotesStatus",
		Method:             "GET",
		PathPattern:        "/v1/events/{event_id}/votes/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1EventsEventIDVotesStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1EventsEventIDVotesStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1EventsEventIdVotesStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchV1EventsEventID Update an incident event
*/
func (a *Client) PatchV1EventsEventID(params *PatchV1EventsEventIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1EventsEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1EventsEventIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1EventsEventId",
		Method:             "PATCH",
		PathPattern:        "/v1/events/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1EventsEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1EventsEventIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1EventsEventId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchV1EventsEventIDVotes patch v1 events event Id votes API
*/
func (a *Client) PatchV1EventsEventIDVotes(params *PatchV1EventsEventIDVotesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1EventsEventIDVotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1EventsEventIDVotesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1EventsEventIdVotes",
		Method:             "PATCH",
		PathPattern:        "/v1/events/{event_id}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1EventsEventIDVotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1EventsEventIDVotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1EventsEventIdVotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
