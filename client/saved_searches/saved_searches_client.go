// Code generated by go-swagger; DO NOT EDIT.

package saved_searches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new saved searches API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saved searches API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1SavedSearchesResourceTypeSavedSearchID deletes a specific saved search

Delete a specific saved search
*/
func (a *Client) DeleteV1SavedSearchesResourceTypeSavedSearchID(params *DeleteV1SavedSearchesResourceTypeSavedSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1SavedSearchesResourceTypeSavedSearchIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SavedSearchesResourceTypeSavedSearchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1SavedSearchesResourceTypeSavedSearchId",
		Method:             "DELETE",
		PathPattern:        "/v1/saved_searches/{resource_type}/{saved_search_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1SavedSearchesResourceTypeSavedSearchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1SavedSearchesResourceTypeSavedSearchIDNoContent), nil

}

/*
GetV1SavedSearchesResourceType lists save searches

Lists save searches
*/
func (a *Client) GetV1SavedSearchesResourceType(params *GetV1SavedSearchesResourceTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1SavedSearchesResourceTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SavedSearchesResourceTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1SavedSearchesResourceType",
		Method:             "GET",
		PathPattern:        "/v1/saved_searches/{resource_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1SavedSearchesResourceTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1SavedSearchesResourceTypeOK), nil

}

/*
GetV1SavedSearchesResourceTypeSavedSearchID retrieves a specific save search

Retrieve a specific save search
*/
func (a *Client) GetV1SavedSearchesResourceTypeSavedSearchID(params *GetV1SavedSearchesResourceTypeSavedSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1SavedSearchesResourceTypeSavedSearchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SavedSearchesResourceTypeSavedSearchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1SavedSearchesResourceTypeSavedSearchId",
		Method:             "GET",
		PathPattern:        "/v1/saved_searches/{resource_type}/{saved_search_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1SavedSearchesResourceTypeSavedSearchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1SavedSearchesResourceTypeSavedSearchIDOK), nil

}

/*
PatchV1SavedSearchesResourceTypeSavedSearchID updates a specific saved search

Update a specific saved search
*/
func (a *Client) PatchV1SavedSearchesResourceTypeSavedSearchID(params *PatchV1SavedSearchesResourceTypeSavedSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1SavedSearchesResourceTypeSavedSearchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SavedSearchesResourceTypeSavedSearchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1SavedSearchesResourceTypeSavedSearchId",
		Method:             "PATCH",
		PathPattern:        "/v1/saved_searches/{resource_type}/{saved_search_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1SavedSearchesResourceTypeSavedSearchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1SavedSearchesResourceTypeSavedSearchIDOK), nil

}

/*
PostV1SavedSearchesResourceType creates saved search

Create a new saved search for a particular resource type
*/
func (a *Client) PostV1SavedSearchesResourceType(params *PostV1SavedSearchesResourceTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1SavedSearchesResourceTypeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SavedSearchesResourceTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1SavedSearchesResourceType",
		Method:             "POST",
		PathPattern:        "/v1/saved_searches/{resource_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1SavedSearchesResourceTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1SavedSearchesResourceTypeCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
