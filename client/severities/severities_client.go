// Code generated by go-swagger; DO NOT EDIT.

package severities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new severities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for severities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1SeveritiesSeveritySlug deletes a specific severity

Delete a specific severity
*/
func (a *Client) DeleteV1SeveritiesSeveritySlug(params *DeleteV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1SeveritiesSeveritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SeveritiesSeveritySlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1SeveritiesSeveritySlug",
		Method:             "DELETE",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1SeveritiesSeveritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1SeveritiesSeveritySlugOK), nil

}

/*
GetV1Severities lists severities

Lists severities
*/
func (a *Client) GetV1Severities(params *GetV1SeveritiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1SeveritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeveritiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1Severities",
		Method:             "GET",
		PathPattern:        "/v1/severities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1SeveritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1SeveritiesOK), nil

}

/*
GetV1SeveritiesSeveritySlug retrieves a specific severity

Retrieve a specific severity
*/
func (a *Client) GetV1SeveritiesSeveritySlug(params *GetV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1SeveritiesSeveritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeveritiesSeveritySlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1SeveritiesSeveritySlug",
		Method:             "GET",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1SeveritiesSeveritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1SeveritiesSeveritySlugOK), nil

}

/*
PatchV1SeveritiesSeveritySlug updates a specific severity

Update a specific severity
*/
func (a *Client) PatchV1SeveritiesSeveritySlug(params *PatchV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1SeveritiesSeveritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeveritiesSeveritySlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1SeveritiesSeveritySlug",
		Method:             "PATCH",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1SeveritiesSeveritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1SeveritiesSeveritySlugOK), nil

}

/*
PostV1Severities creates severity

Create a new severity
*/
func (a *Client) PostV1Severities(params *PostV1SeveritiesParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1SeveritiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SeveritiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1Severities",
		Method:             "POST",
		PathPattern:        "/v1/severities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1SeveritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1SeveritiesCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
