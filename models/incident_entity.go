// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncidentEntity Retrieve an incident
// swagger:model IncidentEntity
type IncidentEntity struct {

	// active
	Active string `json:"active,omitempty"`

	// The time the incident was opened
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// current milestone
	CurrentMilestone string `json:"current_milestone,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// UUID of the Incident
	ID string `json:"id,omitempty"`

	// incident roles
	IncidentRoles []*IncidentRoleEntity `json:"incident_roles"`

	// A key/value of labels
	Labels interface{} `json:"labels,omitempty"`

	// milestones
	Milestones []*MilestoneEntity `json:"milestones"`

	// Name of the incident
	Name string `json:"name,omitempty"`

	// organization id
	OrganizationID string `json:"organization_id,omitempty"`

	// private id
	PrivateID string `json:"private_id,omitempty"`

	// role assignments
	RoleAssignments *RoleAssignmentEntity `json:"role_assignments,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// severity condition
	SeverityCondition string `json:"severity_condition,omitempty"`

	// severity impact
	SeverityImpact string `json:"severity_impact,omitempty"`

	// status pages
	StatusPages *StatusPageEntity `json:"status_pages,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`
}

// Validate validates this incident entity
func (m *IncidentEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncidentRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusPages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentEntity) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IncidentEntity) validateIncidentRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.IncidentRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.IncidentRoles); i++ {
		if swag.IsZero(m.IncidentRoles[i]) { // not required
			continue
		}

		if m.IncidentRoles[i] != nil {
			if err := m.IncidentRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incident_roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentEntity) validateMilestones(formats strfmt.Registry) error {

	if swag.IsZero(m.Milestones) { // not required
		return nil
	}

	for i := 0; i < len(m.Milestones); i++ {
		if swag.IsZero(m.Milestones[i]) { // not required
			continue
		}

		if m.Milestones[i] != nil {
			if err := m.Milestones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentEntity) validateRoleAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleAssignments) { // not required
		return nil
	}

	if m.RoleAssignments != nil {
		if err := m.RoleAssignments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_assignments")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentEntity) validateStatusPages(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusPages) { // not required
		return nil
	}

	if m.StatusPages != nil {
		if err := m.StatusPages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_pages")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncidentEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentEntity) UnmarshalBinary(b []byte) error {
	var res IncidentEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
