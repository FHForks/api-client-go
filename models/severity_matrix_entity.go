// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SeverityMatrixEntity Retrieve the Severity matrix for your organization and its components and configured severities.
//
// swagger:model SeverityMatrixEntity
type SeverityMatrixEntity struct {

	// conditions
	Conditions *ConditionEntity `json:"conditions,omitempty"`

	// impacts
	Impacts *ImpactEntity `json:"impacts,omitempty"`

	// matrix
	Matrix *ItemEntity `json:"matrix,omitempty"`
}

// Validate validates this severity matrix entity
func (m *SeverityMatrixEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatrix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeverityMatrixEntity) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	if m.Conditions != nil {
		if err := m.Conditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

func (m *SeverityMatrixEntity) validateImpacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Impacts) { // not required
		return nil
	}

	if m.Impacts != nil {
		if err := m.Impacts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impacts")
			}
			return err
		}
	}

	return nil
}

func (m *SeverityMatrixEntity) validateMatrix(formats strfmt.Registry) error {
	if swag.IsZero(m.Matrix) { // not required
		return nil
	}

	if m.Matrix != nil {
		if err := m.Matrix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matrix")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this severity matrix entity based on the context it is used
func (m *SeverityMatrixEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImpacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatrix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeverityMatrixEntity) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.Conditions != nil {
		if err := m.Conditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

func (m *SeverityMatrixEntity) contextValidateImpacts(ctx context.Context, formats strfmt.Registry) error {

	if m.Impacts != nil {
		if err := m.Impacts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impacts")
			}
			return err
		}
	}

	return nil
}

func (m *SeverityMatrixEntity) contextValidateMatrix(ctx context.Context, formats strfmt.Registry) error {

	if m.Matrix != nil {
		if err := m.Matrix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matrix")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SeverityMatrixEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeverityMatrixEntity) UnmarshalBinary(b []byte) error {
	var res SeverityMatrixEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
